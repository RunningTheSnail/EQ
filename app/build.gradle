apply plugin: 'com.android.application'

//签名配置
println(rootProject.ext.url.signingUrl);
Properties signingProperties = new Properties();
//检查是否需要签名
def signingFileExists = file(rootProject.ext.url.signingUrl).exists()
if (!signingFileExists)
    println '当前项目被配置为不签名,如需开启,配置signing.properties文件';
else {
    println '当前项目配置了签名';
    signingProperties.load(file(rootProject.ext.url.signingUrl).newDataInputStream());
}

//定义开发环境和生产环境服务器地址
def String DEBUG_URL = "\"" + rootProject.ext.url.debugUrl + "\"";
def String RELEASE_URL = "\"" + rootProject.ext.url.releaseUrl + "\"";

//定义打包的时间
def packageTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"));
}

buildscript {
    repositories {
        jcenter()
        flatDir {
            dirs 'libs' //this way we can find the .aar file in libs folder
        }
    }

    dependencies {

    }
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        //manifest 字符串替换
        manifestPlaceholders = [app_name: "@string/app_name"]
        buildConfigField "String", "SERVER_URL", DEBUG_URL
    }

    //先判断需不需要签名
    if (signingFileExists) {
        //签名配置
        signingConfigs {
            release {
                storeFile file(signingProperties.get('RELEASE_STORE_FILE'))
                storePassword signingProperties.get('RELEASE_STORE_PASSWORD')
                keyAlias signingProperties.get('RELEASE_KEY_ALIAS')
                keyPassword signingProperties.get('RELEASE_KEY_PASSWORD')
            }
        }
    }

    buildTypes {

        debug {
            //测试环境的服务器地址
            buildConfigField "String", "SERVER_URL", DEBUG_URL
            //是否开启混淆
            minifyEnabled false
            //是否zip优化
            zipAlignEnabled true
            //移除无用的资源文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            //生产环境的服务器地址
            buildConfigField "String", "SERVER_URL", RELEASE_URL
            //是否开启混淆
            minifyEnabled false
            //是否zip优化
            zipAlignEnabled true
            //移除无用的资源文件
            shrinkResources true
            //配置签名
            if (signingFileExists) {
                signingConfig signingConfigs.release
            }
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        //开发环境
        dev {
        }
    }


    sourceSets {
        main {
            //so包可以直接放在libs目录
            jniLibs.srcDirs = ['libs']
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }

    //修改生成的最终文件名
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                File outputDirectory = new File(outputFile.parent);
                def fileName
                if (variant.buildType.name == "release") {
                    // 输出apk名称为app_v1.0.0_2015-06-15_playStore.apk
                    fileName = "app_v${defaultConfig.versionName}_${packageTime()}_${variant.productFlavors[0].name}.apk"
                } else {
                    //debug版本
                    fileName = "app_v${defaultConfig.versionName}_${packageTime()}_beta.apk"
                }
                //定义生成的路径
                output.outputFile = new File(outputDirectory, fileName)
            }
        }
    }

    // 删掉没有对齐的APK文件
    applicationVariants.all { variant ->
        //assemble task最后
        variant.assemble.doLast {
            variant.outputs.each { output ->
                File unaligned = output.packageApplication.outputFile;
                File aligned = output.outputFile
                if (!unaligned.getName().equalsIgnoreCase(aligned.getName())) {
                    println "deleting " + unaligned.getName()
                    unaligned.delete()
                }
            }
        }
    }

    //将flavor名称作为友盟渠道名
    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }

    //过滤debug版本
//    variantFilter { variant ->
//        if (variant.buildType.name == "debug") {
//            variant.ignore = true
//        }
//    }


}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile rootProject.ext.dependencies["appcompat-v7"]
    compile 'com.android.support:design:23.1.1'
//    compile(name: 'eq-release', ext: 'aar')
//    compile(name: 'pgyer-release', ext: 'aar')
    compile project(':eq')
    compile project(':pgyer')
}

repositories {
    jcenter()
    flatDir {
        dirs 'libs' //this way we can find the .aar file in libs folder
    }
}

